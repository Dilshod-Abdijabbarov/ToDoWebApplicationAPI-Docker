// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToDoWebApplication.Data;

#nullable disable

namespace ToDoWebApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.AddDueDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FinishedTime")
                        .HasColumnType("integer");

                    b.Property<int>("TaskBaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskBaseId");

                    b.ToTable("AddDueDates");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.AddFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<int>("TaskBaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskBaseId");

                    b.ToTable("AddFiles");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddDateTime")
                        .HasColumnType("integer");

                    b.Property<int>("TaskBaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskBaseId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.RepeatTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddDateTime")
                        .HasColumnType("integer");

                    b.Property<int>("Nummer")
                        .HasColumnType("integer");

                    b.Property<int>("TaskBaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskBaseId");

                    b.ToTable("RepeatTimes");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.TaskBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FinishedTask")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Important")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Planned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Remind_me")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.AddDueDate", b =>
                {
                    b.HasOne("ToDoWebApplication.Domian.Entities.TaskBase", "TaskBase")
                        .WithMany("AddDueDates")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskBase");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.AddFile", b =>
                {
                    b.HasOne("ToDoWebApplication.Domian.Entities.TaskBase", "TaskBase")
                        .WithMany("AddFiles")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskBase");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.Category", b =>
                {
                    b.HasOne("ToDoWebApplication.Domian.Entities.TaskBase", "TaskBase")
                        .WithMany("Categories")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskBase");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.RepeatTime", b =>
                {
                    b.HasOne("ToDoWebApplication.Domian.Entities.TaskBase", "TaskBase")
                        .WithMany("RepeatTimes")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskBase");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.TaskBase", b =>
                {
                    b.HasOne("ToDoWebApplication.Domian.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.TaskBase", b =>
                {
                    b.Navigation("AddDueDates");

                    b.Navigation("AddFiles");

                    b.Navigation("Categories");

                    b.Navigation("RepeatTimes");
                });

            modelBuilder.Entity("ToDoWebApplication.Domian.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
